{
	"info": {
		"_postman_id": "9c96b72b-fe2d-4a29-8639-4bb2150164bf",
		"name": "feature",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Добавление нового комментария",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"const target = pm.response.json();\r",
							"pm.test(\"Ответ должен содержать поля: id, text, authorName, created\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('text');\r",
							"pm.expect(target).to.have.property('authorName');\r",
							"pm.expect(target).to.have.property('created');\r",
							"});\r",
							"\r",
							"pm.test(\"Проверка поля id\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData.id, '\"id\" должен быть 1').to.eql(1);\r",
							"});\r",
							"\r",
							"pm.test(\"Проверка поля 'text'\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('text');\r",
							"    pm.expect(jsonData.text, '\"text\" должен быть равен \"Комментарий\"').to.eql('Комментарий')\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": \"Комментарий\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/comments/:eventId/:userId",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"comments",
						":eventId",
						":userId"
					],
					"variable": [
						{
							"key": "eventId",
							"value": "2"
						},
						{
							"key": "userId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление комментария с пустым текстом",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"pm.test(\"Ответ должен содержать поля: timestamp, status, error, path\", function () {\r",
							"pm.expect(target).to.have.property('timestamp');\r",
							"pm.expect(target).to.have.property('status');\r",
							"pm.expect(target).to.have.property('error');\r",
							"pm.expect(target).to.have.property('path');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": \"\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/comments/:eventId/:userId",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"comments",
						":eventId",
						":userId"
					],
					"variable": [
						{
							"key": "eventId",
							"value": "2"
						},
						{
							"key": "userId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление комментария с text.length < 5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"pm.test(\"Ответ должен содержать поля: timestamp, status, error, path\", function () {\r",
							"pm.expect(target).to.have.property('timestamp');\r",
							"pm.expect(target).to.have.property('status');\r",
							"pm.expect(target).to.have.property('error');\r",
							"pm.expect(target).to.have.property('path');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": \"+\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/comments/:eventId/:userId",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"comments",
						":eventId",
						":userId"
					],
					"variable": [
						{
							"key": "eventId",
							"value": "2"
						},
						{
							"key": "userId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление комментария с text.length > 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"pm.test(\"Ответ должен содержать поля: timestamp, status, error, path\", function () {\r",
							"pm.expect(target).to.have.property('timestamp');\r",
							"pm.expect(target).to.have.property('status');\r",
							"pm.expect(target).to.have.property('error');\r",
							"pm.expect(target).to.have.property('path');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": \"Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/comments/:eventId/:userId",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"comments",
						":eventId",
						":userId"
					],
					"variable": [
						{
							"key": "eventId",
							"value": "2"
						},
						{
							"key": "userId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление комментария от несуществующего пользователя",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"pm.test(\"Ответ должен содержать поля: status, reason, message, timestamp\", function () {\r",
							"pm.expect(target).to.have.property('status');\r",
							"pm.expect(target).to.have.property('reason');\r",
							"pm.expect(target).to.have.property('message');\r",
							"pm.expect(target).to.have.property('timestamp');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": \"Еще один комментарий\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/comments/:eventId/:userId",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"comments",
						":eventId",
						":userId"
					],
					"variable": [
						{
							"key": "eventId",
							"value": "3"
						},
						{
							"key": "userId",
							"value": "10000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление комментария к несуществующему событию",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"pm.test(\"Ответ должен содержать поля: status, reason, message, timestamp\", function () {\r",
							"pm.expect(target).to.have.property('status');\r",
							"pm.expect(target).to.have.property('reason');\r",
							"pm.expect(target).to.have.property('message');\r",
							"pm.expect(target).to.have.property('timestamp');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": \" И еще один комментарий\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/comments/:eventId/:userId",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"comments",
						":eventId",
						":userId"
					],
					"variable": [
						{
							"key": "eventId",
							"value": "10000"
						},
						{
							"key": "userId",
							"value": "4"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление комментария к неопубликованному событию",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 409\", function () {\r",
							"    pm.response.to.have.status(409);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"pm.test(\"Ответ должен содержать поля: status, reason, message, timestamp\", function () {\r",
							"pm.expect(target).to.have.property('status');\r",
							"pm.expect(target).to.have.property('reason');\r",
							"pm.expect(target).to.have.property('message');\r",
							"pm.expect(target).to.have.property('timestamp');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": \" И еще один комментарий\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/comments/:eventId/:userId",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"comments",
						":eventId",
						":userId"
					],
					"variable": [
						{
							"key": "eventId",
							"value": "1"
						},
						{
							"key": "userId",
							"value": "10"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление второго комментария",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"const target = pm.response.json();\r",
							"pm.test(\"Ответ должен содержать поля: id, text, authorName, created\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('text');\r",
							"pm.expect(target).to.have.property('authorName');\r",
							"pm.expect(target).to.have.property('created');\r",
							"});\r",
							"\r",
							"pm.test(\"Проверка поля id\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData.id, '\"id\" должен быть 2').to.eql(2);\r",
							"});\r",
							"\r",
							"pm.test(\"Проверка поля 'text'\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('text');\r",
							"    pm.expect(jsonData.text, '\"text\" должен быть равен \"Комментарий 2\"').to.eql('Комментарий 2')\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": \"Комментарий 2\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/comments/:eventId/:userId",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"comments",
						":eventId",
						":userId"
					],
					"variable": [
						{
							"key": "eventId",
							"value": "2"
						},
						{
							"key": "userId",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление третьего комментария",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"const target = pm.response.json();\r",
							"pm.test(\"Ответ должен содержать поля: id, text, authorName, created\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('text');\r",
							"pm.expect(target).to.have.property('authorName');\r",
							"pm.expect(target).to.have.property('created');\r",
							"});\r",
							"\r",
							"pm.test(\"Проверка поля id\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData.id, '\"id\" должен быть 3').to.eql(3);\r",
							"});\r",
							"\r",
							"pm.test(\"Проверка поля 'text'\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('text');\r",
							"    pm.expect(jsonData.text, '\"text\" должен быть равен \"Комментарий 3\"').to.eql('Комментарий 3')\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": \"Комментарий 3\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/comments/:eventId/:userId",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"comments",
						":eventId",
						":userId"
					],
					"variable": [
						{
							"key": "eventId",
							"value": "5"
						},
						{
							"key": "userId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Обновление комментария пользователем",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"const target = pm.response.json();\r",
							"pm.test(\"Ответ должен содержать поля: id, text, authorName, created\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('text');\r",
							"pm.expect(target).to.have.property('authorName');\r",
							"pm.expect(target).to.have.property('created');\r",
							"});\r",
							"\r",
							"pm.test(\"Проверка поля id\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData.id, '\"id\" должен быть 1').to.eql(1);\r",
							"});\r",
							"\r",
							"pm.test(\"Проверка поля 'text'\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('text');\r",
							"    pm.expect(jsonData.text, '\"text\" должен быть равен \"Обновленный комментарий\"').to.eql('Обновленный комментарий')\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": \"Обновленный комментарий\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/comments/:userId/:comId",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"comments",
						":userId",
						":comId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "1"
						},
						{
							"key": "comId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Обновление комментария не автором",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 409\", function () {\r",
							"    pm.response.to.have.status(409);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"pm.test(\"Ответ должен содержать поля: status, reason, message, timestamp\", function () {\r",
							"pm.expect(target).to.have.property('status');\r",
							"pm.expect(target).to.have.property('reason');\r",
							"pm.expect(target).to.have.property('message');\r",
							"pm.expect(target).to.have.property('timestamp');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": \"Обновленный комментарий от другого пользователя\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/comments/:userId/:comId",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"comments",
						":userId",
						":comId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "2"
						},
						{
							"key": "comId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Обновление несуществующего комментария",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"pm.test(\"Ответ должен содержать поля: status, reason, message, timestamp\", function () {\r",
							"pm.expect(target).to.have.property('status');\r",
							"pm.expect(target).to.have.property('reason');\r",
							"pm.expect(target).to.have.property('message');\r",
							"pm.expect(target).to.have.property('timestamp');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": \"Обновленный комментарий\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/comments/:userId/:comId",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"comments",
						":userId",
						":comId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "1"
						},
						{
							"key": "comId",
							"value": "10000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Удаление комментария не его автором",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 409\", function () {\r",
							"    pm.response.to.have.status(409);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"pm.test(\"Ответ должен содержать поля: status, reason, message, timestamp\", function () {\r",
							"pm.expect(target).to.have.property('status');\r",
							"pm.expect(target).to.have.property('reason');\r",
							"pm.expect(target).to.have.property('message');\r",
							"pm.expect(target).to.have.property('timestamp');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/comments/:userId/:comId",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"comments",
						":userId",
						":comId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "2"
						},
						{
							"key": "comId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Удаление несуществующего комментария",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"pm.test(\"Ответ должен содержать поля: status, reason, message, timestamp\", function () {\r",
							"pm.expect(target).to.have.property('status');\r",
							"pm.expect(target).to.have.property('reason');\r",
							"pm.expect(target).to.have.property('message');\r",
							"pm.expect(target).to.have.property('timestamp');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/comments/:userId/:comId",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"comments",
						":userId",
						":comId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "1"
						},
						{
							"key": "comId",
							"value": "10000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Удаление комментария пользователем",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/comments/:userId/:comId",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"comments",
						":userId",
						":comId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "2"
						},
						{
							"key": "comId",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение администратором комментариев определенного пользователя",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.be.ok;\r",
							"});\r",
							"\r",
							"pm.test(\"Test list user response\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.length, 'List length must be 2').to.eql(2);\r",
							"});\r",
							"\r",
							"pm.test(\"Test comment[0] 'id' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0]).to.have.property('id');\r",
							"    pm.expect(jsonData[0].id, '\"id\" должен быть 3').to.eql(3);\r",
							"});\r",
							"pm.test(\"Test comment[0] 'text' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0]).to.have.property('text');\r",
							"    pm.expect(jsonData[0].text, '\"text\" должен быть \"Комментарий 3\"').to.eql('Комментарий 3');\r",
							"});\r",
							"\r",
							"pm.test(\"Test comment[1] 'id' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[1]).to.have.property('id');\r",
							"    pm.expect(jsonData[1].id, '\"id\" должен быть 1').to.eql(1);\r",
							"});\r",
							"pm.test(\"Test comment[1] 'text' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[1]).to.have.property('text');\r",
							"    pm.expect(jsonData[1].text, '\"text\"должен быть \"Обновленный комментарий\"').to.eql('Обновленный комментарий');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/admin/comments/:userId",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"admin",
						"comments",
						":userId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение администратором комментариев определенного пользователя со значениями from и size по умолчанию",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.be.ok;\r",
							"});\r",
							"\r",
							"pm.test(\"Test list user response\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.length, 'List length must be 2').to.eql(2);\r",
							"});\r",
							"\r",
							"pm.test(\"Test comment[0] 'id' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0]).to.have.property('id');\r",
							"    pm.expect(jsonData[0].id, '\"id\" должен быть 3').to.eql(3);\r",
							"});\r",
							"pm.test(\"Test comment[0] 'text' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0]).to.have.property('text');\r",
							"    pm.expect(jsonData[0].text, '\"text\" должен быть \"Комментарий 3\"').to.eql('Комментарий 3');\r",
							"});\r",
							"\r",
							"pm.test(\"Test comment[1] 'id' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[1]).to.have.property('id');\r",
							"    pm.expect(jsonData[1].id, '\"id\" должен быть 1').to.eql(1);\r",
							"});\r",
							"pm.test(\"Test comment[1] 'text' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[1]).to.have.property('text');\r",
							"    pm.expect(jsonData[1].text, '\"text\"должен быть \"Обновленный комментарий\"').to.eql('Обновленный комментарий');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/admin/comments/:userId?from=0&size=10",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"admin",
						"comments",
						":userId"
					],
					"query": [
						{
							"key": "from",
							"value": "0"
						},
						{
							"key": "size",
							"value": "10"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение администратором комментариев от несуществующего пользователя",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"pm.test(\"Ответ должен содержать поля: status, reason, message, timestamp\", function () {\r",
							"pm.expect(target).to.have.property('status');\r",
							"pm.expect(target).to.have.property('reason');\r",
							"pm.expect(target).to.have.property('message');\r",
							"pm.expect(target).to.have.property('timestamp');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/admin/comments/:userId",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"admin",
						"comments",
						":userId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "10000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Удаление комментария администратором",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/admin/comments/:comId",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"admin",
						"comments",
						":comId"
					],
					"variable": [
						{
							"key": "comId",
							"value": "3"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Удаление несуществующего комментария администратором",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"pm.test(\"Ответ должен содержать поля: status, reason, message, timestamp\", function () {\r",
							"pm.expect(target).to.have.property('status');\r",
							"pm.expect(target).to.have.property('reason');\r",
							"pm.expect(target).to.have.property('message');\r",
							"pm.expect(target).to.have.property('timestamp');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/admin/comments/:comId",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"admin",
						"comments",
						":comId"
					],
					"variable": [
						{
							"key": "comId",
							"value": "10000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение коментариев события с id = 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.be.ok;\r",
							"});\r",
							"\r",
							"pm.test(\"Test list user response\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);\r",
							"});\r",
							"\r",
							"pm.test(\"Test comment[0] 'id' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0]).to.have.property('id');\r",
							"    pm.expect(jsonData[0].id, '\"id\" должен быть 1').to.eql(1);\r",
							"});\r",
							"pm.test(\"Test comment[0] 'text' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0]).to.have.property('text');\r",
							"    pm.expect(jsonData[0].text, '\"text\" должен быть \"Обновленный комментарий\"').to.eql('Обновленный комментарий');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/comments/:eventId",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"comments",
						":eventId"
					],
					"variable": [
						{
							"key": "eventId",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение комментариев события с id = 2 со значениями from и size по умолчанию",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.be.ok;\r",
							"});\r",
							"\r",
							"pm.test(\"Test list user response\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);\r",
							"});\r",
							"\r",
							"pm.test(\"Test comment[0] 'id' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0]).to.have.property('id');\r",
							"    pm.expect(jsonData[0].id, '\"id\" должен быть 1').to.eql(1);\r",
							"});\r",
							"pm.test(\"Test comment[0] 'text' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0]).to.have.property('text');\r",
							"    pm.expect(jsonData[0].text, '\"text\" должен быть \"Обновленный комментарий\"').to.eql('Обновленный комментарий');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/comments/:eventId?from=0&size=10",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"comments",
						":eventId"
					],
					"query": [
						{
							"key": "from",
							"value": "0"
						},
						{
							"key": "size",
							"value": "10"
						}
					],
					"variable": [
						{
							"key": "eventId",
							"value": "2"
						}
					]
				}
			},
			"response": []
		}
	]
}